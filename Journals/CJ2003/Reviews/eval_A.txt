-------------------------------------------------------------------------

REFEREE A:

Paper number: 	02-025
Authors: 	Christian Rinderknecht
Title of Paper: A set-based semantics for validating ASN.1 specifications


Evaluation:

Please rank from 1 = Poor to 5 = Excellent. 

Technical Quality: 		3
Knowledge of field: 		4
Rigour of arguments: 		3
Originality: 			4
Clarity of presentation:	2.5
Organisation: 			3
Standard of English: 		3
References to other work:	3

Summary: 	

> The author's contribution presented in this paper is [...]

More detailed recommendations:
>
>	No	Accept without revisions
>	Yes	Accept with substantial revisions
>	No	Definitely reject


Further Comments to the Author


1  Introduction

> The introduction is clear, but may be a little emphatic with respect
> to the industrial benefits from ASN.1 (second paragraph: "...thanks
> to ASN.1 Millions of cars and trucks..."). Such facts may be true,
> but they belong to "grand public" magazines, not to scientific
> papers.

I shortened the paragraph.

> On the other hand, it would be useful to give an idea of the
> difference between X.680, and ASN.1. What is missing in X.680?

Good point, but I cannot really present what is out of topic, so I
just added a short footnote. The reader should check the bibliography,
I think.

> Last paragraph, Page 2, about finiteness: it is unclear whether
> infinite values are rejected for the existing encoding rules, but
> might be accepted some day (with other encoding rules), or are
> forbidden no matter what the encoding rule is.

Another good point. I changed the sentence to: "The finiteness
condition applies no matter what the encoding rules are, but it arises
from the fact that the current standard encoding rules cannot handle
infinite values, i.e. recursive values."

> Page 3, second paragraph: you mention that the complement operator
> is not monotonic: is there any "fixpoint idea" behind your
> semantics? It does not seem to be the case from the rest of the
> paper. Why is it important? 

No, indeed, there is no fix-point approximation or computation in my
proposal, the fix-point is in the algorithm of Aiken & Wimmer.

Reading your detailed comments below, I realized that I insisted too
much on presenting this present work as a semantics. It is a semantics
indeed (if one also takes into account the solving algorithm), but it
does not assume the usual theoritical background and tools of
semanticists. Using a different wording, I would say that I propose a
set-theoretic interpretation of ASN.1 specifications that allows to
decide the emptyness question on types, and this interpretation is
presented as an algorithm. I changed a little the focus accordingly,
in the introduction.

> Page 3, third paragraph: why not speak of a (single) system
> of constraints, rather than of several systems? The reader wonders
> whether each system corresponds to a different semantics, or the
> single system splits into systems of various kinds.

You are right. Now I only speak of one system of constraints, and this
indeed simplifies the collection. Now the semantics of constraints
(the solving procedure) relies on functions which characteristize
subclasses of constraints which have to be solved with a specific
algorithm: integer intervals, real intervals, regular expressions,
powersets and sets.

1.1  Typos or English suggestions [...]

I followed all your recommendations. Thank you.


2.1  Typos or English Suggestions [...]

I followed your recommendation. Thank you.


3  Core ASN.1

> Core ASN.1 seems to be defined as the image of ASN.1 by a rewriting
> procedure, whose each transformation (informally) preserves the
> semantics of its input. 

Right.

> Although this rewriting system is interesting to consider, it would
> be useful to have some kind of characterization of ASN.1,
> independent from the rewriting system. 

You are right, this was missing. I added a paragraph before the
presentation of the rewriting system, which defines informally ASN.1
core per se:

"In core ASN.1,

   * there are no COMPONENTS OF or selection types;

   * the INTEGER type does not allow defining constants;

   * component types are references;

   * SET OF and SEQUENCE OF apply to references;

   * default values are references;

   * enumerated and bit string constants are references;

   * types of declared values are references;

   * default, enumerated, integer and bit string values appear in
     a constraint upon their expected type;
 
   * types in inclusion constraints are references;

   * there is no type reference just after the symbol ``::='' and
     constraints appear only at top-level, i.e. the Extended BNF for
     type declarations is: <type reference> ::= <non-reference type
     without inner constraints> ["("<subtyping constraint>")"]

   * there are no infinite values, i.e., recursive values."

It is possible to define formally ASN.1 core with a grammar (except
the property "there are no infinite values"), but it would be too
bulky here.


> Actually, the most important difference between ASN.1 and
> its core seems to be the removal of  "<" selection operator (step
> 5), and removal of COMPONENT in records (SET or SEQUENCE). 

See my previous modification.


> Note that this step 5 combines selection removal with unfolding. It
> is unclear why these transformations are not separate.

Good point. I changed slightly some steps in accordance.


> Finally, the purpose of ASN.1 core seems unclear:
>  * Remove unnecessary constructions from ASN.1?

Yes, but not only:

>  * Some kind of normalization, introduced for validation purposes?

The main point is that ASN.1 core allows a much simpler presentation
of the collection algorithm, for instance a clear separation between
collection on (strict) types and (strict) subtypes (the link lies
through type references, if any, in component types). Another example
is: default values being references, collection on types can forget
about the default values (their definition lies now at top-level). 

>    What is the normal form? 

See above.

> Some kind of justification for each transformation (what use is it?)
> would be most welcome.

It is not possible to explain that in this section, so I added 
backward references in the collection algorithm to all the points
characterizing ASN.1 core.


> In Section 3.2 about the meta-language, the recursive definition of
> fact is strange: fact does not terminate.

Yes, indeed! Thank you.


3.1  Typos or English suggestions [...]

> Maybe "ASN.1 Core" would be more suitable (in English) than "Core
> ASN.1".

I followed the same convention as "core ML"...


4  Well-founded Types

>   * Is there a simple, yet formal, definition of a well founded
>     type, other than through the inference system?

Yes, but it is not really difficult and too long. See the long
footnote added.

>   * If not, what kind of ill-recursion is the inference system
>     designed to reject? And why?
>
> An example of ill-recursion is given: A ::= B; B ::= A. Why is this
> bad? With a least fixpoint approach, assuming that there is no other
> definition of A or B, A and B would be assigned the empty set, thus
> rendering the specification invalid, which is a good reason for
> rejecting this. With another approach, we need a different
> argument. 

This is a mistake I made. In fact, ASN.1 _core_ contains no
recursion isomorphic to X ::= X (like A ::= B  B ::= A), so they are
not a concern in the well-foundedness criterion. Now, the reason why
ASN.1 core disallows X ::= X is simply that I want the (syntactic)
constraint to appear (if any) at top-level:

<type reference> ::= <non type-reference> (<constraint>)

But I agree that, in theory, X ::= X is not a problem for the
collection of constraints (it gives simply $\alpha = \alpha$).

> Additional examples would be welcome. For instance, how about 
> A ::= SET OF A?

Obviously, it is well-founded (I added an explicit axiom for these
cases), since {} is always a value of SET OF.


5  Systems of Constraints

> Definition 5.2 is hard to understand. [...]
>
> Maybe the name "Set Terms" adds some confusion. [...]

I changed completely this section, to make it much more
readable. Thank you for pointing this out.


5.1  Typos or English suggestions [...]

I followed your recommendation. Thanks.


6  Constraint Expressions from Types

> The semantics of SEQUENCE OF and SET OF are the same (bottom of Page
> 17). Although it has been announced in Section 2 (Short Presentation
> of ASN.1) that no distinction would be made between these notions, I
> always thought that the distinction was relevant of ASN.1 semantics,
> independently from encoding rules. We can actually read on Page 5:
> "The SET OF type corresponds to the mathematical notion of sets with
> repetition.". Some additional explanation, somewhere in the paper,
> would help.

The standard says:
"27 Notation for the set-of types
[...]
27.4 Each 'Value' sequence in the 'ValueList' shall be the notation
for a value of the "Type" specified in the "SetofType". 
NOTE 1 - Semantic significance should not be placed on the order of
these values. 
NOTE 2 - Encoding rules are not required to preserve the order of
these values. [...]"

and:

"25 Notation for sequence-of types
[...]
25.4 Each "Value" in the "ValueList" shall be of the type specified
in the "SequenceOfType".
NOTE - Semantic significance may be placed on the order of these
values."

The word "semantic" here stands for "application semantics", i.e. an
assumption made by the sender and/or the receiver --- in other words:
it is a possible assumption on the encodings, not a property of the
ASN.1 language.

For instance:

T ::= SET ({1,2} INTERSECTION {2,1}) OF INTEGER

is empty.

Nevertheless, this point seems to be obscure even for the ITU-T ASN.1
Rapporteur himself!


7  Constraint Expressions from Subtypes

> Regular expression constraint semantics seems to be artificially
> complex, with the match of type T against the (R, I, F, P, S)
> categories. It looks like an implementation issue, which should be
> hidden at a suitable level of abstraction.
> Since several cases are similar, this section could easily be
> shortened, thus making room for more accurate explanations of
> representative cases. 

You are right. I removed this optimisation, and the presentation is
much clearer.

> Section 7.10 (Value Constraint) gives too much
> detail for a case which is relatively barren: the algorithm seems
> artificially clumsy (same remark as for regular expressions).

You are right. I changed a bit the definition of core ASN.1: BIT
STRING does not declare constants anymore. Also, I rewrote the Value
Constraint semantics in a more functional way. The result is much more
readable.

8  Complete Collection and Solving

> A (short) presentation of Aiken & Wimers algorithm is missing from
> the paper: it would help understanding this section, and in
> particular, what has been added to solve the whole problem. This
> presentation could be either placed at the beginning of this
> section, or earlier, for example after the short introduction to
> ASN.1

The algorithm of Aiken & Wimmer is very technical, hence hard to
summarize here. All what is presented in the paper is my contribution
to solve the problem.


9  References

> Let me mention a slide presentation made available on ASN.1 site, by
> Rodolphe Pueyo [...]

I am afraid it is not suitable to cite in a journal paper a slide
presentation which has not been followed by a paper
version. Nevertheless, I read it with interest. I believe the PVS
approach is definitely a good idea.

-------------------------------------------------------------------------
